version: '3.8'

services:
  # AI Agent Application
  ai-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-agent
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    environment:
      - AI_AGENT_ENV=production
      - AI_AGENT_HOST=0.0.0.0
      - AI_AGENT_PORT=8000
      - DATABASE_URL=postgresql+asyncpg://ai_agent:password123@postgres:5432/ai_agent
      - REDIS_URL=redis://redis:6379/0
      - MONGODB_URL=mongodb://mongo:27017/ai_agent
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./plugins:/app/plugins
    depends_on:
      - postgres
      - redis
      - mongo
      - chroma
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-agent-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ai_agent
      - POSTGRES_USER=ai_agent
      - POSTGRES_PASSWORD=password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_agent -d ai_agent"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: ai-agent-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass password123
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # MongoDB Document Store
  mongo:
    image: mongo:7
    container_name: ai-agent-mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=ai_agent
    volumes:
      - mongo_data:/data/db
      - ./scripts/init_mongo.js:/docker-entrypoint-initdb.d/init_mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - ai-agent-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/ai_agent --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # ChromaDB Vector Database
  chroma:
    image: chromadb/chroma:latest
    container_name: ai-agent-chroma
    restart: unless-stopped
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8001:8000"
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-agent-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ai-agent-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai-agent-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - ai-agent-network
    depends_on:
      - prometheus

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ai-agent-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
      - "6831:6831/udp"  # UDP
    networks:
      - ai-agent-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-agent-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - ai-agent
    networks:
      - ai-agent-network

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-agent-celery-worker
    restart: unless-stopped
    command: celery -A ai_agent.tasks.celery worker --loglevel=info --concurrency=4
    environment:
      - AI_AGENT_ENV=production
      - DATABASE_URL=postgresql+asyncpg://ai_agent:password123@postgres:5432/ai_agent
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - ai-agent-network

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-agent-celery-beat
    restart: unless-stopped
    command: celery -A ai_agent.tasks.celery beat --loglevel=info
    environment:
      - AI_AGENT_ENV=production
      - DATABASE_URL=postgresql+asyncpg://ai_agent:password123@postgres:5432/ai_agent
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      - postgres
      - redis
    networks:
      - ai-agent-network

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-agent-flower
    restart: unless-stopped
    command: celery -A ai_agent.tasks.celery flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - FLOWER_BASIC_AUTH=admin:admin123
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    networks:
      - ai-agent-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongo_data:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  ai-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16